// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weights.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_weights_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_weights_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_weights_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_weights_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_weights_2eproto;
namespace gpt2 {
class Weight;
struct WeightDefaultTypeInternal;
extern WeightDefaultTypeInternal _Weight_default_instance_;
class Weight_Plaintext;
struct Weight_PlaintextDefaultTypeInternal;
extern Weight_PlaintextDefaultTypeInternal _Weight_Plaintext_default_instance_;
class Weights;
struct WeightsDefaultTypeInternal;
extern WeightsDefaultTypeInternal _Weights_default_instance_;
class Weights_ValueEntry_DoNotUse;
struct Weights_ValueEntry_DoNotUseDefaultTypeInternal;
extern Weights_ValueEntry_DoNotUseDefaultTypeInternal _Weights_ValueEntry_DoNotUse_default_instance_;
}  // namespace gpt2
PROTOBUF_NAMESPACE_OPEN
template<> ::gpt2::Weight* Arena::CreateMaybeMessage<::gpt2::Weight>(Arena*);
template<> ::gpt2::Weight_Plaintext* Arena::CreateMaybeMessage<::gpt2::Weight_Plaintext>(Arena*);
template<> ::gpt2::Weights* Arena::CreateMaybeMessage<::gpt2::Weights>(Arena*);
template<> ::gpt2::Weights_ValueEntry_DoNotUse* Arena::CreateMaybeMessage<::gpt2::Weights_ValueEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gpt2 {

// ===================================================================

class Weight_Plaintext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt2.Weight.Plaintext) */ {
 public:
  inline Weight_Plaintext() : Weight_Plaintext(nullptr) {}
  ~Weight_Plaintext() override;
  explicit PROTOBUF_CONSTEXPR Weight_Plaintext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weight_Plaintext(const Weight_Plaintext& from);
  Weight_Plaintext(Weight_Plaintext&& from) noexcept
    : Weight_Plaintext() {
    *this = ::std::move(from);
  }

  inline Weight_Plaintext& operator=(const Weight_Plaintext& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weight_Plaintext& operator=(Weight_Plaintext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weight_Plaintext& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weight_Plaintext* internal_default_instance() {
    return reinterpret_cast<const Weight_Plaintext*>(
               &_Weight_Plaintext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Weight_Plaintext& a, Weight_Plaintext& b) {
    a.Swap(&b);
  }
  inline void Swap(Weight_Plaintext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weight_Plaintext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weight_Plaintext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weight_Plaintext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weight_Plaintext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Weight_Plaintext& from) {
    Weight_Plaintext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weight_Plaintext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt2.Weight.Plaintext";
  }
  protected:
  explicit Weight_Plaintext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated float value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:gpt2.Weight.Plaintext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weights_2eproto;
};
// -------------------------------------------------------------------

class Weight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt2.Weight) */ {
 public:
  inline Weight() : Weight(nullptr) {}
  ~Weight() override;
  explicit PROTOBUF_CONSTEXPR Weight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weight(const Weight& from);
  Weight(Weight&& from) noexcept
    : Weight() {
    *this = ::std::move(from);
  }

  inline Weight& operator=(const Weight& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weight& operator=(Weight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weight& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weight* internal_default_instance() {
    return reinterpret_cast<const Weight*>(
               &_Weight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Weight& a, Weight& b) {
    a.Swap(&b);
  }
  inline void Swap(Weight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Weight& from) {
    Weight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt2.Weight";
  }
  protected:
  explicit Weight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Weight_Plaintext Plaintext;

  // accessors -------------------------------------------------------

  enum : int {
    kPlaintextsFieldNumber = 2,
    kDimFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .gpt2.Weight.Plaintext plaintexts = 2;
  int plaintexts_size() const;
  private:
  int _internal_plaintexts_size() const;
  public:
  void clear_plaintexts();
  ::gpt2::Weight_Plaintext* mutable_plaintexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt2::Weight_Plaintext >*
      mutable_plaintexts();
  private:
  const ::gpt2::Weight_Plaintext& _internal_plaintexts(int index) const;
  ::gpt2::Weight_Plaintext* _internal_add_plaintexts();
  public:
  const ::gpt2::Weight_Plaintext& plaintexts(int index) const;
  ::gpt2::Weight_Plaintext* add_plaintexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt2::Weight_Plaintext >&
      plaintexts() const;

  // repeated int32 dim = 3;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  int32_t _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dim() const;
  void _internal_add_dim(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dim();
  public:
  int32_t dim(int index) const;
  void set_dim(int index, int32_t value);
  void add_dim(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dim();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gpt2.Weight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt2::Weight_Plaintext > plaintexts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dim_;
    mutable std::atomic<int> _dim_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weights_2eproto;
};
// -------------------------------------------------------------------

class Weights_ValueEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Weights_ValueEntry_DoNotUse, 
    std::string, ::gpt2::Weight,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Weights_ValueEntry_DoNotUse, 
    std::string, ::gpt2::Weight,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Weights_ValueEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Weights_ValueEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Weights_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Weights_ValueEntry_DoNotUse& other);
  static const Weights_ValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Weights_ValueEntry_DoNotUse*>(&_Weights_ValueEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gpt2.Weights.ValueEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_weights_2eproto;
};

// -------------------------------------------------------------------

class Weights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt2.Weights) */ {
 public:
  inline Weights() : Weights(nullptr) {}
  ~Weights() override;
  explicit PROTOBUF_CONSTEXPR Weights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weights(const Weights& from);
  Weights(Weights&& from) noexcept
    : Weights() {
    *this = ::std::move(from);
  }

  inline Weights& operator=(const Weights& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weights& operator=(Weights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weights& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weights* internal_default_instance() {
    return reinterpret_cast<const Weights*>(
               &_Weights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Weights& a, Weights& b) {
    a.Swap(&b);
  }
  inline void Swap(Weights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Weights& from) {
    Weights::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt2.Weights";
  }
  protected:
  explicit Weights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // map<string, .gpt2.Weight> value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >&
      _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >*
      _internal_mutable_value();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:gpt2.Weights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Weights_ValueEntry_DoNotUse,
        std::string, ::gpt2::Weight,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weights_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Weight_Plaintext

// repeated float value = 1;
inline int Weight_Plaintext::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int Weight_Plaintext::value_size() const {
  return _internal_value_size();
}
inline void Weight_Plaintext::clear_value() {
  _impl_.value_.Clear();
}
inline float Weight_Plaintext::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline float Weight_Plaintext::value(int index) const {
  // @@protoc_insertion_point(field_get:gpt2.Weight.Plaintext.value)
  return _internal_value(index);
}
inline void Weight_Plaintext::set_value(int index, float value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:gpt2.Weight.Plaintext.value)
}
inline void Weight_Plaintext::_internal_add_value(float value) {
  _impl_.value_.Add(value);
}
inline void Weight_Plaintext::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:gpt2.Weight.Plaintext.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Weight_Plaintext::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Weight_Plaintext::value() const {
  // @@protoc_insertion_point(field_list:gpt2.Weight.Plaintext.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Weight_Plaintext::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Weight_Plaintext::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:gpt2.Weight.Plaintext.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Weight

// optional string name = 1;
inline bool Weight::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Weight::has_name() const {
  return _internal_has_name();
}
inline void Weight::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Weight::name() const {
  // @@protoc_insertion_point(field_get:gpt2.Weight.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Weight::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gpt2.Weight.name)
}
inline std::string* Weight::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gpt2.Weight.name)
  return _s;
}
inline const std::string& Weight::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Weight::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Weight::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Weight::release_name() {
  // @@protoc_insertion_point(field_release:gpt2.Weight.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Weight::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gpt2.Weight.name)
}

// repeated .gpt2.Weight.Plaintext plaintexts = 2;
inline int Weight::_internal_plaintexts_size() const {
  return _impl_.plaintexts_.size();
}
inline int Weight::plaintexts_size() const {
  return _internal_plaintexts_size();
}
inline void Weight::clear_plaintexts() {
  _impl_.plaintexts_.Clear();
}
inline ::gpt2::Weight_Plaintext* Weight::mutable_plaintexts(int index) {
  // @@protoc_insertion_point(field_mutable:gpt2.Weight.plaintexts)
  return _impl_.plaintexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt2::Weight_Plaintext >*
Weight::mutable_plaintexts() {
  // @@protoc_insertion_point(field_mutable_list:gpt2.Weight.plaintexts)
  return &_impl_.plaintexts_;
}
inline const ::gpt2::Weight_Plaintext& Weight::_internal_plaintexts(int index) const {
  return _impl_.plaintexts_.Get(index);
}
inline const ::gpt2::Weight_Plaintext& Weight::plaintexts(int index) const {
  // @@protoc_insertion_point(field_get:gpt2.Weight.plaintexts)
  return _internal_plaintexts(index);
}
inline ::gpt2::Weight_Plaintext* Weight::_internal_add_plaintexts() {
  return _impl_.plaintexts_.Add();
}
inline ::gpt2::Weight_Plaintext* Weight::add_plaintexts() {
  ::gpt2::Weight_Plaintext* _add = _internal_add_plaintexts();
  // @@protoc_insertion_point(field_add:gpt2.Weight.plaintexts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt2::Weight_Plaintext >&
Weight::plaintexts() const {
  // @@protoc_insertion_point(field_list:gpt2.Weight.plaintexts)
  return _impl_.plaintexts_;
}

// repeated int32 dim = 3;
inline int Weight::_internal_dim_size() const {
  return _impl_.dim_.size();
}
inline int Weight::dim_size() const {
  return _internal_dim_size();
}
inline void Weight::clear_dim() {
  _impl_.dim_.Clear();
}
inline int32_t Weight::_internal_dim(int index) const {
  return _impl_.dim_.Get(index);
}
inline int32_t Weight::dim(int index) const {
  // @@protoc_insertion_point(field_get:gpt2.Weight.dim)
  return _internal_dim(index);
}
inline void Weight::set_dim(int index, int32_t value) {
  _impl_.dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:gpt2.Weight.dim)
}
inline void Weight::_internal_add_dim(int32_t value) {
  _impl_.dim_.Add(value);
}
inline void Weight::add_dim(int32_t value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:gpt2.Weight.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Weight::_internal_dim() const {
  return _impl_.dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Weight::dim() const {
  // @@protoc_insertion_point(field_list:gpt2.Weight.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Weight::_internal_mutable_dim() {
  return &_impl_.dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Weight::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:gpt2.Weight.dim)
  return _internal_mutable_dim();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Weights

// map<string, .gpt2.Weight> value = 1;
inline int Weights::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int Weights::value_size() const {
  return _internal_value_size();
}
inline void Weights::clear_value() {
  _impl_.value_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >&
Weights::_internal_value() const {
  return _impl_.value_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >&
Weights::value() const {
  // @@protoc_insertion_point(field_map:gpt2.Weights.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >*
Weights::_internal_mutable_value() {
  return _impl_.value_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::gpt2::Weight >*
Weights::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:gpt2.Weights.value)
  return _internal_mutable_value();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpt2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_weights_2eproto
